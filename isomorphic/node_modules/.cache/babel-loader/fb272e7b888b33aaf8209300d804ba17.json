{"ast":null,"code":"'use strict';\n\nvar range; // Create a range object for efficently rendering strings to elements.\n\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar testEl = doc ? doc.body || doc.createElement('div') : {}; // Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\n\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n  actualHasAttributeNS = function actualHasAttributeNS(el, namespaceURI, name) {\n    return el.hasAttributeNS(namespaceURI, name);\n  };\n} else if (testEl.hasAttribute) {\n  actualHasAttributeNS = function actualHasAttributeNS(el, namespaceURI, name) {\n    return el.hasAttribute(name);\n  };\n} else {\n  actualHasAttributeNS = function actualHasAttributeNS(el, namespaceURI, name) {\n    return el.getAttributeNode(namespaceURI, name) != null;\n  };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\nfunction toElement(str) {\n  if (!range && doc.createRange) {\n    range = doc.createRange();\n    range.selectNode(doc.body);\n  }\n\n  var fragment;\n\n  if (range && range.createContextualFragment) {\n    fragment = range.createContextualFragment(str);\n  } else {\n    fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n  }\n\n  return fragment.childNodes[0];\n}\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\n\n\nfunction compareNodeNames(fromEl, toEl) {\n  var fromNodeName = fromEl.nodeName;\n  var toNodeName = toEl.nodeName;\n\n  if (fromNodeName === toNodeName) {\n    return true;\n  }\n\n  if (toEl.actualize && fromNodeName.charCodeAt(0) < 91 &&\n  /* from tag name is upper case */\n  toNodeName.charCodeAt(0) > 90\n  /* target tag name is lower case */\n  ) {\n      // If the target element is a virtual DOM node then we may need to normalize the tag name\n      // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n      // are converted to upper case\n      return fromNodeName === toNodeName.toUpperCase();\n    } else {\n    return false;\n  }\n}\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\n\n\nfunction createElementNS(name, namespaceURI) {\n  return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);\n}\n/**\n * Copies the children of one DOM element to another DOM element\n */\n\n\nfunction moveChildren(fromEl, toEl) {\n  var curChild = fromEl.firstChild;\n\n  while (curChild) {\n    var nextChild = curChild.nextSibling;\n    toEl.appendChild(curChild);\n    curChild = nextChild;\n  }\n\n  return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n  var attrs = toNode.attributes;\n  var i;\n  var attr;\n  var attrName;\n  var attrNamespaceURI;\n  var attrValue;\n  var fromValue;\n\n  for (i = attrs.length - 1; i >= 0; --i) {\n    attr = attrs[i];\n    attrName = attr.name;\n    attrNamespaceURI = attr.namespaceURI;\n    attrValue = attr.value;\n\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName;\n      fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n      if (fromValue !== attrValue) {\n        fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n      }\n    } else {\n      fromValue = fromNode.getAttribute(attrName);\n\n      if (fromValue !== attrValue) {\n        fromNode.setAttribute(attrName, attrValue);\n      }\n    }\n  } // Remove any extra attributes found on the original DOM element that\n  // weren't found on the target element.\n\n\n  attrs = fromNode.attributes;\n\n  for (i = attrs.length - 1; i >= 0; --i) {\n    attr = attrs[i];\n\n    if (attr.specified !== false) {\n      attrName = attr.name;\n      attrNamespaceURI = attr.namespaceURI;\n\n      if (attrNamespaceURI) {\n        attrName = attr.localName || attrName;\n\n        if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n          fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n        }\n      } else {\n        if (!hasAttributeNS(toNode, null, attrName)) {\n          fromNode.removeAttribute(attrName);\n        }\n      }\n    }\n  }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n  if (fromEl[name] !== toEl[name]) {\n    fromEl[name] = toEl[name];\n\n    if (fromEl[name]) {\n      fromEl.setAttribute(name, '');\n    } else {\n      fromEl.removeAttribute(name, '');\n    }\n  }\n}\n\nvar specialElHandlers = {\n  /**\n   * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n   * attribute when reading over the attributes using selectEl.attributes\n   */\n  OPTION: function OPTION(fromEl, toEl) {\n    syncBooleanAttrProp(fromEl, toEl, 'selected');\n  },\n\n  /**\n   * The \"value\" attribute is special for the <input> element since it sets\n   * the initial value. Changing the \"value\" attribute without changing the\n   * \"value\" property will have no effect since it is only used to the set the\n   * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n   */\n  INPUT: function INPUT(fromEl, toEl) {\n    syncBooleanAttrProp(fromEl, toEl, 'checked');\n    syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n    if (fromEl.value !== toEl.value) {\n      fromEl.value = toEl.value;\n    }\n\n    if (!hasAttributeNS(toEl, null, 'value')) {\n      fromEl.removeAttribute('value');\n    }\n  },\n  TEXTAREA: function TEXTAREA(fromEl, toEl) {\n    var newValue = toEl.value;\n\n    if (fromEl.value !== newValue) {\n      fromEl.value = newValue;\n    }\n\n    var firstChild = fromEl.firstChild;\n\n    if (firstChild) {\n      // Needed for IE. Apparently IE sets the placeholder as the\n      // node value and vise versa. This ignores an empty update.\n      var oldValue = firstChild.nodeValue;\n\n      if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {\n        return;\n      }\n\n      firstChild.nodeValue = newValue;\n    }\n  },\n  SELECT: function SELECT(fromEl, toEl) {\n    if (!hasAttributeNS(toEl, null, 'multiple')) {\n      var selectedIndex = -1;\n      var i = 0;\n      var curChild = toEl.firstChild;\n\n      while (curChild) {\n        var nodeName = curChild.nodeName;\n\n        if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n          if (hasAttributeNS(curChild, null, 'selected')) {\n            selectedIndex = i;\n            break;\n          }\n\n          i++;\n        }\n\n        curChild = curChild.nextSibling;\n      }\n\n      fromEl.selectedIndex = i;\n    }\n  }\n};\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var childrenOnly = options.childrenOnly === true; // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n\n    var fromNodesLookup = {};\n    var keyedRemovalList;\n\n    function addKeyedRemoval(key) {\n      if (keyedRemovalList) {\n        keyedRemovalList.push(key);\n      } else {\n        keyedRemovalList = [key];\n      }\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n\n        while (curChild) {\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n    /**\n     * Removes a DOM node out of the original DOM\n     *\n     * @param  {Node} node The node to remove\n     * @param  {Node} parentNode The nodes parent\n     * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n     * @return {undefined}\n     */\n\n\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    } // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n\n        while (curChild) {\n          var key = getNodeKey(curChild);\n\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          } // Walk recursively\n\n\n          indexTree(curChild);\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n      var curChild = el.firstChild;\n\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n        var key = getNodeKey(curChild);\n\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          }\n        }\n\n        handleNodeAdded(curChild);\n        curChild = nextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n      var curFromNodeKey;\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it is will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n        return;\n      }\n\n      if (!childrenOnly) {\n        if (onBeforeElUpdated(fromEl, toEl) === false) {\n          return;\n        }\n\n        morphAttrs(fromEl, toEl);\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        var curToNodeChild = toEl.firstChild;\n        var curFromNodeChild = fromEl.firstChild;\n        var curToNodeKey;\n        var fromNextSibling;\n        var toNextSibling;\n        var matchingFromEl;\n\n        outer: while (curToNodeChild) {\n          toNextSibling = curToNodeChild.nextSibling;\n          curToNodeKey = getNodeKey(curToNodeChild);\n\n          while (curFromNodeChild) {\n            fromNextSibling = curFromNodeChild.nextSibling;\n\n            if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            }\n\n            curFromNodeKey = getNodeKey(curFromNodeChild);\n            var curFromNodeType = curFromNodeChild.nodeType;\n            var isCompatible = undefined;\n\n            if (curFromNodeType === curToNodeChild.nodeType) {\n              if (curFromNodeType === ELEMENT_NODE) {\n                // Both nodes being compared are Element nodes\n                if (curToNodeKey) {\n                  // The target node has a key so we want to match it up with the correct element\n                  // in the original DOM tree\n                  if (curToNodeKey !== curFromNodeKey) {\n                    // The current element in the original DOM tree does not have a matching key so\n                    // let's check our lookup to see if there is a matching element in the original\n                    // DOM tree\n                    if (matchingFromEl = fromNodesLookup[curToNodeKey]) {\n                      if (curFromNodeChild.nextSibling === matchingFromEl) {\n                        // Special case for single element removals. To avoid removing the original\n                        // DOM node out of the tree (since that can break CSS transitions, etc.),\n                        // we will instead discard the current node and wait until the next\n                        // iteration to properly match up the keyed target element with its matching\n                        // element in the original tree\n                        isCompatible = false;\n                      } else {\n                        // We found a matching keyed element somewhere in the original DOM tree.\n                        // Let's moving the original DOM node into the current position and morph\n                        // it.\n                        // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                        // the `removeNode()` function for the node that is being discarded so that\n                        // all lifecycle hooks are correctly invoked\n                        fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curFromNodeKey) {\n                          // Since the node is keyed it might be matched up later so we defer\n                          // the actual removal to later\n                          addKeyedRemoval(curFromNodeKey);\n                        } else {\n                          // NOTE: we skip nested keyed nodes from being removed since there is\n                          //       still a chance they will be matched up later\n                          removeNode(curFromNodeChild, fromEl, true\n                          /* skip keyed nodes */\n                          );\n                        }\n\n                        curFromNodeChild = matchingFromEl;\n                      }\n                    } else {\n                      // The nodes are not compatible since the \"to\" node has a key and there\n                      // is no matching keyed node in the source tree\n                      isCompatible = false;\n                    }\n                  }\n                } else if (curFromNodeKey) {\n                  // The original has a key\n                  isCompatible = false;\n                }\n\n                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n\n                if (isCompatible) {\n                  // We found compatible DOM elements so transform\n                  // the current \"from\" node to match the current\n                  // target DOM node.\n                  morphEl(curFromNodeChild, curToNodeChild);\n                }\n              } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                // Both nodes being compared are Text or Comment nodes\n                isCompatible = true; // Simply update nodeValue on the original node to\n                // change the text value\n\n                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                  curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                }\n              }\n            }\n\n            if (isCompatible) {\n              // Advance both the \"to\" child and the \"from\" child since we found a match\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            } // No compatible match so remove the old node from the DOM and continue trying to find a\n            // match in the original DOM. However, we only do this if the from node is not keyed\n            // since it is possible that a keyed node might match up with a node somewhere else in the\n            // target tree and we don't want to discard it just yet since it still might find a\n            // home in the final DOM tree. After everything is done we will remove any keyed nodes\n            // that didn't find a home\n\n\n            if (curFromNodeKey) {\n              // Since the node is keyed it might be matched up later so we defer\n              // the actual removal to later\n              addKeyedRemoval(curFromNodeKey);\n            } else {\n              // NOTE: we skip nested keyed nodes from being removed since there is\n              //       still a chance they will be matched up later\n              removeNode(curFromNodeChild, fromEl, true\n              /* skip keyed nodes */\n              );\n            }\n\n            curFromNodeChild = fromNextSibling;\n          } // If we got this far then we did not find a candidate match for\n          // our \"to node\" and we exhausted all of the children \"from\"\n          // nodes. Therefore, we will just append the current \"to\" node\n          // to the end\n\n\n          if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n            fromEl.appendChild(matchingFromEl);\n            morphEl(matchingFromEl, curToNodeChild);\n          } else {\n            var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n\n            if (onBeforeNodeAddedResult !== false) {\n              if (onBeforeNodeAddedResult) {\n                curToNodeChild = onBeforeNodeAddedResult;\n              }\n\n              if (curToNodeChild.actualize) {\n                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n              }\n\n              fromEl.appendChild(curToNodeChild);\n              handleNodeAdded(curToNodeChild);\n            }\n          }\n\n          curToNodeChild = toNextSibling;\n          curFromNodeChild = fromNextSibling;\n        } // We have processed all of the \"to nodes\". If curFromNodeChild is\n        // non-null then we still have some from nodes left over that need\n        // to be removed\n\n\n        while (curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true\n            /* skip keyed nodes */\n            );\n          }\n\n          curFromNodeChild = fromNextSibling;\n        }\n      }\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphEl(...)\n\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {\n        // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      morphEl(morphedNode, toNode, childrenOnly); // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n\n      if (keyedRemovalList) {\n        for (var i = 0, len = keyedRemovalList.length; i < len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      } // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n\n\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\nmodule.exports = morphdom;","map":null,"metadata":{},"sourceType":"script"}