{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cleri\\\\Downloads\\\\isomorphic\\\\isomorphic\\\\src\\\\customApp\\\\containers\\\\FormValidation.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport Form from '../../../src/components/uielements/form';\nimport Checkbox from '../../../src/components/uielements/checkbox';\nimport Button from '../../../src/components/uielements/button';\nimport Notification from '../../../src/components/notification';\nvar FormItem = Form.Item;\n\nvar FormWIthSubmissionButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormWIthSubmissionButton, _Component);\n\n  function FormWIthSubmissionButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormWIthSubmissionButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormWIthSubmissionButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          Notification('success', 'Received values of form', JSON.stringify(values));\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.checkPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.checkConfirm = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    return _this;\n  }\n\n  _createClass(FormWIthSubmissionButton, [{\n    key: \"onChangeAlphaNumericInput\",\n    value: function onChangeAlphaNumericInput(e) {\n      var value = e.target.value;\n      var regex = /^[0-9a-zA-Z(\\-)]+$/; //this will admit letters, numbers and dashes\n\n      if (value.match(regex) || value === \"\") {\n        this.setState({\n          inputValue: value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 6\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 14\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 14,\n            offset: 6\n          }\n        }\n      };\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"E-mail\",\n        hasFeedback: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), getFieldDecorator('email', {\n        rules: [{\n          type: 'text',\n          validator: this.onChangeHandle,\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, {\n        name: \"email\",\n        id: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Password\",\n        hasFeedback: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }, {\n          validator: this.checkConfirm\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Confirm Password\",\n        hasFeedback: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.checkPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n        style: {\n          marginBottom: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), getFieldDecorator('agreement', {\n        valuePropName: 'checked',\n        rules: [{\n          message: 'Please input your E-mail!',\n          required: true\n        }]\n      })(React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"I have read the \", React.createElement(\"a\", {\n        href: \"# \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"agreement\")))), React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Register\")));\n    }\n  }]);\n\n  return FormWIthSubmissionButton;\n}(Component);\n\nvar WrappedFormWIthSubmissionButton = Form.create()(FormWIthSubmissionButton);\nexport default WrappedFormWIthSubmissionButton;","map":{"version":3,"sources":["C:\\Users\\cleri\\Downloads\\isomorphic\\isomorphic\\src\\customApp\\containers\\FormValidation.js"],"names":["React","Component","Input","Form","Checkbox","Button","Notification","FormItem","Item","FormWIthSubmissionButton","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","JSON","stringify","handleConfirmBlur","value","target","setState","checkPassword","rule","callback","getFieldValue","checkConfirm","validateFields","force","regex","match","inputValue","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","type","validator","onChangeHandle","message","required","marginBottom","valuePropName","WrappedFormWIthSubmissionButton","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\nimport Form from '../../../src/components/uielements/form';\r\nimport Checkbox from '../../../src/components/uielements/checkbox';\r\nimport Button from '../../../src/components/uielements/button';\r\nimport Notification from '../../../src/components/notification';\r\nconst FormItem = Form.Item;\r\n\r\nclass FormWIthSubmissionButton extends Component {\r\n  state = {\r\n    confirmDirty: false,\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        Notification(\r\n          'success',\r\n          'Received values of form',\r\n          JSON.stringify(values)\r\n        );\r\n      }\r\n    });\r\n  };\r\n  handleConfirmBlur = e => {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n  checkPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n  checkConfirm = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n  onChangeAlphaNumericInput(e) {\r\n    const value = e.target.value;\r\n    const regex = /^[0-9a-zA-Z(\\-)]+$/; //this will admit letters, numbers and dashes\r\n    if (value.match(regex) || value === \"\") {\r\n      this.setState({ inputValue: value });\r\n    }\r\n  }\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 14 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 14,\r\n          offset: 6,\r\n        },\r\n      },\r\n    };\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormItem {...formItemLayout} label=\"E-mail\" hasFeedback>\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'text',\r\n                validator: this.onChangeHandle,\r\n                message: 'The input is not valid E-mail!',\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Please input your E-mail!',\r\n              },\r\n            ],\r\n          })(<Input name=\"email\" id=\"email\" />)}\r\n        </FormItem>\r\n        <FormItem {...formItemLayout} label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n              {\r\n                validator: this.checkConfirm,\r\n              },\r\n            ],\r\n          })(<Input type=\"password\" />)}\r\n        </FormItem>\r\n        <FormItem {...formItemLayout} label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n              },\r\n              {\r\n                validator: this.checkPassword,\r\n              },\r\n            ],\r\n          })(<Input type=\"password\" onBlur={this.handleConfirmBlur} />)}\r\n        </FormItem>\r\n        <FormItem {...tailFormItemLayout} style={{ marginBottom: 8 }}>\r\n          {getFieldDecorator('agreement', {\r\n            valuePropName: 'checked',\r\n            rules: [\r\n              {\r\n                message: 'Please input your E-mail!',\r\n                required: true,\r\n              },\r\n            ],\r\n          })(\r\n            <Checkbox>\r\n              I have read the <a href=\"# \">agreement</a>\r\n            </Checkbox>\r\n          )}\r\n        </FormItem>\r\n        <FormItem {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </FormItem>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedFormWIthSubmissionButton = Form.create()(FormWIthSubmissionButton);\r\nexport default WrappedFormWIthSubmissionButton;\r\n"]},"metadata":{},"sourceType":"module"}